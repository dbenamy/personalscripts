#!/usr/bin/env bash
                                                                                                   
# fail on any errors (same as set -e)
set -o errexit

function add_to_machines_repo {
    TABLE_FILE="$1"
    if [ ! -e $TABLE_FILE ]
    then
        return 1
    fi
    
    CURRDIR=$(pwd)

    if [[ -z "$PERS_DIR" ]]
    then
        PERS_DIR="$HOME/pers"
    fi
    
    if [[ -d $PERS_DIR/machines ]]
    then
        echo "Updating machines repository."
        cd $PERS_DIR/machines
        git pull origin master
    else
        echo "No machines repository found.  Cloning."
        git clone git@bitbucket.org:swirepe/machines.git $PERS_DIR/machines
    fi

    IPRECORD_DIR="$PERS_DIR/machines/iptables/$(hostname)"
    
    if [ ! -d $IPRECORD_DIR ]
    then
        echo "[viiptables] $IPRECORD_DIR does not exist: creating."
        mkdir -p $IPRECORD_DIR
    fi
    
    cd $IPRECORD_DIR
    cp $TABLE_FILE $IPRECORD_DIR/iptables.txt &&
    git add $IPRECORD_DIR/iptables.txt        &&
    git commit -m "viiptables $(hostname)"    &&
    git push origin master
    
}


MACHINES=''
PIDFILE=''
if [[ "$1" == "--restore-after-five-minutes" ]]
then
    RESTORE_TABLE="$2"
    MACHINES="$3"
    sleep 5m
    iptables-restore < $RESTORE_TABLE
    
    if [[ "$MACHINES" ]]
    then
        add_to_machines_repo $RESTORE_TABLE
    fi
    
    exit 0
else 
    while test $% -gt 0
    do
        case "$1" in
            -h|--help)
                echo  "viiptables"
                echo  "This script lets you edit iptables, and restores their original settings after five minutes if no action is taken."
                echo  ""
                echo  "--help               Show this information."
                echo  "--machines           Store iptables in the machines repository."
                echo  "--pid PIDFILE        Location to store the pid of the restarter process."
                echo  "This is an example iptables file, with descriptions."
                echo  "See https://fedoraproject.org/wiki/How_to_edit_iptables_rules?rd=User_talk:Rforlot"
                echo  ""
                echo  "# Generated by iptables-save v1.4.12 on Wed Dec  7 20:22:39 2011  "                                                                                
                echo  "*filter <--------------------------------------------------------- Specify the table of the next rules"                                            
                echo  ":INPUT DROP [157:36334] <----------------------------------------- This is the three chain belong to filter table, then the policy of the chain"   
                echo  ":FORWARD ACCEPT [0:0] <------------------------------------------- and between brackets [<packet-counter>:<byte-counter>] numbers is for"          
                echo  ":OUTPUT ACCEPT [48876:76493439] <--------------------------------- debug/informations purpose only. Leave them at their current value. "           
                echo  "-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT <--------- A rule. "                                                                       
                echo  "-A INPUT -p icmp -j ACCEPT <-------------------------------------- You just have to take all arguments"                                            
                echo  "-A INPUT -i lo -j ACCEPT <---------------------------------------- of an iptables command."                                                        
                echo  "-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT "                                                                                 
                echo  "COMMIT <---------------------------------------------------------- Needed at each end of table definition. Commit rules in that table."             
                echo  "# Completed on Wed Dec  7 20:22:39 2011"        
                
                exit 0
                ;;
            --machines)
                MACHINES="True"
                shift
                ;;
             --pid)
                shift
                if test $# -gt 0
                then
                    PIDFILE="$1"
                else
                    echo "Error: no pidfile named." 1>&2
                    exit 4
                fi
                shift 
                ;;
              *)
                echo "Error: unknown argument $1" 1>&2
                ;;
                  
        esac
    done

elif [[ "$1" == "--machines" ]]
then
    MACHINES="True"
fi



if [[ $EUID -ne 0 ]]
then
   echo "This script must be run as root" 1>&2
   exit 1
fi

if [[ -z "$(which $0)" ]]
then
    echo "$0 must be in path." 1>&2
    exit 2
fi


## get an editor

if [ -z "$EDITOR" ]
then
    EDITOR="$(which vim || which nano || which vi)"
fi

if [ -z "$EDITOR" ]
then
    echo "ERROR: \$EDITOR not set." 1>&2
    exit 3
fi


TMP_TABLE_ORIGINAL="$(mktemp /etc/iptables-original.XXXXXX)"
TMP_TABLE_EDIT="$(mktemp /etc/iptables-edit.XXXXXX)"


iptables-save > $TMP_TABLE_ORIGINAL
iptables-save > $TMP_TABLE_EDIT

HASH_PRE_EDIT="$(shasum $TMP_TABLE_EDIT)"

$EDITOR $TMP_TABLE_EDIT

HASH_POST_EDIT="$(shasum $TMP_TABLE_EDIT)"


if [[ "$HASH_PRE_EDIT" == "$HASH_POST_EDIT" ]]
then
    echo "Temporary iptables file $TMP_TABLE_EDIT not changed.  Exiting."
    exit 0
else
    echo "Temporary iptables file $TMP_TABLE_EDIT successfully installed."
fi


iptables-restore < $TMP_TABLE_EDIT


nohup $0 --restore-after-five-minutes $TMP_TABLE_ORIGINAL $MACHINES &
PID="$!"


echo "Tables will be restored in five minutes."
echo "Kill PID $PID to keep this from happening."

if [[ ! -z "$PIDFILE" ]]
then
    echo "$PID" > $PIDFILE
fi


if [[ "$MACHINES" ]]
then
    add_to_machines_repo $TMP_TABLE_EDIT
fi

exit 0
