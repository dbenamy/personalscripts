# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


## This bashrc will check for the existance of a bashincludes
## directory and a scripts in memory
## Ff it doesn't find them it copies them in.
## Those files then get sourced.

## This bashrc behaves differently, based on the existance of 
## certain files in the home directory.
##       ~/.bashrc_time     output how long it takes to start up
##       ~/.bashrc_verbose  output how long each included item takes to load up
##       ~/.bashrc_skip     skip the includes


# If not running interactively, don't do anything
[ -z "$PS1" ] && return



# we can time this
if [ -f ~/.bashrc_time ]
then
    BASHRC_START_TIME=$(date +%s)
fi


# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


# more colors?
export TERM=xterm-256color


# we can short-circuit startup
if [ -f ~/.bashrc_skip ]
then
   # report this in purple
   echo -e "\e[0;35m[bashrc] Skipping bashrc loadup: ~/.skip_bashrc found.\e[0m"
   rm ~/.bashrc_skip
else

    export PATH="$PATH:/home/swirepe/Matlab"
    export PATH="$PATH:/home/swirepe/Matlab/bin"
    
    
    
    export SCRIPTS_DIR=/home/swirepe/pers/scripts
    export BASHINCLUDES_DIR=$SCRIPTS_DIR/bashincludes
    
    # load these things into memory if we can
    ## UPDATE: We aren't doing that anymore.
    #    if [[  -d "/tmp/ramdisk/bashincludes" ]]
    #    then
    #       BASHINCLUDES_DIR="/tmp/ramdisk/bashincludes"
    #    else
    #        # report this in purple
    #       echo -e "\e[0;35m[bashrc] Copying bashincludes to memory.\e[0m"
    #       BASHINCLUDES_DIR=$(/home/swirepe/pers/scripts/toramdisk.sh "$BASHINCLUDES_DIR")
    #    fi
    #    
    #    if [[ -d "/tmp/ramdisk/scripts" ]]
    #    then
    #        SCRIPTS_DIR="/tmp/ramdisk/scripts"
    #    else
    #        # report this in purple
    #        echo -e "\e[0;35m[bashrc] Copying scripts to memory.\e[0m"
    #        SCRIPTS_DIR=$(/home/swirepe/pers/scripts/toramdisk.sh "$SCRIPTS_DIR")
    #    fi
    
    export PATH="$PATH:$SCRIPTS_DIR"
    
    source $SCRIPTS_DIR/rc/bashrc.include
    
    
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    
    
    PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
    
fi


# how long did this all take to run?
if [ -f ~/.bashrc_time ]
then
    BASHRC_END_TIME=$(date +%s)
    echo -e "${COLOR_Purple}[bashrc] Up in $(echo "$BASHRC_END_TIME - $BASHRC_START_TIME" | bc -l) seconds.$COLOR_off"
fi
